<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="job">
	<insert id="insert" parameterType="jobVO">
		insert into recruit values (
		#{job_wantedAuthNo},
		#{job_company}, #{job_title}, #{job_salTpNm},
		#{job_sal}, #{job_minSal}, #{job_maxSal},
		#{job_region},
		#{job_holidayTpNm}, #{job_minEdubg},
		#{job_career}, #{job_regDt},
		#{job_closeDt},
		#{job_wantedInfoUrl}, #{job_wantedMobileInfoUrl},
		#{job_zipCd},
		#{job_strtnmCd}, #{job_basicAddr}, #{job_detailAddr},
		#{job_empTpCd}, #{job_jobsCd}, #{job_prefCd}
		)
	</insert>
	<insert id="getApiDataYouth" parameterType="youthJobVO">
		insert into youthjob values (
		#{job_wantedAuthNo},
		#{job_company}, #{job_title}, #{job_salTpNm},
		#{job_sal}, #{job_minSal}, #{job_maxSal},
		#{job_region},
		#{job_holidayTpNm}, #{job_minEdubg},
		#{job_career}, #{job_regDt},
		#{job_closeDt},
		#{job_wantedInfoUrl}, #{job_wantedMobileInfoUrl},
		#{job_zipCd},
		#{job_strtnmCd}, #{job_basicAddr}, null,
		#{job_empTpCd}, #{job_jobsCd}, #{job_prefCd}
		)
	</insert>

	<select id="one" parameterType="jobVO" resultType="jobVO">
		select * from
		recruit
		where job_wantedAuthNo = #{job_wantedAuthNo}
	</select>
	<select id="details" parameterType="youthJobVO" resultType="youthJobVO">
		select * from 
		youthJob
		where job_wantedAuthNo = #{job_wantedAuthNo}
	</select>




	<!-- 책에서 본 검색 -->
	<!-- <sql id="criteria"> <trim prefix="(" suffix=") AND" prefixOverrides="OR"> 
		<foreach item='type' collection="typeArr"> <trim prefix="OR"> <choose> <when 
		test="type =='T'.toString()"> title like '%'||#{keyword}||'%' </when> <when 
		test="type =='C'.toString()"> title like '%'||#{keyword}||'%' </when> </choose> 
		</trim> </foreach> </trim> </sql> -->

	<!-- 검색 -->
	<sql id="criteria">
		<where>
			<if test="searchType  == 'job_titleORjob_company'.toString()">
				job_title LIKE CONCAT('%', #{keyword}, '%') 
				OR
				job_company LIKE CONCAT('%', #{keyword}, '%')
			</if>
			<if test="searchType  == 'job_title'.toString()">
				job_title LIKE CONCAT('%', #{keyword}, '%')
			</if>
			<if test="searchType  == 'job_company'.toString()">
				job_company LIKE CONCAT('%', #{keyword}, '%')
			</if>
		</where>
	</sql>
		<!-- 상세검색 -->
	<select id="search2" resultType="jobVO">
		<![CDATA[select * from recruit ]]>
		<include refid="criteria"></include>
		job_region LIKE CONCAT('%', #{kArea}, '%')
		AND
		job_minSal >= #{job_sal}
	</select>
<!-- 	<sql id="criteria2">
		<where>
			job_region LIKE CONCAT('%', #{kArea}, '%')
			AND
			<if test="#{sal} == ''">job_minSal >= 0</if>
			job_minSal >= #{job_sal}
		</where>
	</sql> -->
	
	<!-- 페이징 -->
	<select id="getJobByCri" resultType="jobVO">
		<![CDATA[select * from recruit ]]>
		<include refid="criteria"></include>
		<![CDATA[
			order by job_regDt DESC, job_wantedAuthNo DESC
			limit #{startRow}, #{amount} ]]>
	</select>
	<select id="getYouthJobByCri" resultType="youthJobVO">
		<![CDATA[select * from youthjob ]]>
		<include refid="criteria"></include>
		<![CDATA[
			order by job_regDt DESC, job_wantedAuthNo DESC
			limit #{startRow}, #{amount} ]]>
	</select>

	<select id="getCountJobByCri" resultType="int">
		<![CDATA[SELECT COUNT(*) FROM recruit ]]>
		<include refid="criteria"></include>
	</select>
	<select id="getCountYouthJobByCri" resultType="int">
		<![CDATA[SELECT COUNT(*) FROM youthjob ]]>
		<include refid="criteria"></include>
	</select>


		<!-- <select id="getJobByCri" resultType="jobVO"> <![CDATA[select * from 
			recruit order by job_wantedAuthNo DESC where]]> <include refid="criteria"></include> 
			<![CDATA[ limit #{startRow}, #{amount} ]]> </select> -->

		<!-- <select id="getAllList" resultType="JobVO"> select from * recruit 
			order by job_wantedAuthNo DESC </select> -->

		<!-- <select id="all2" parameterType="pageVO" resultType="jobVO"> select 
			* from ( select row_number() over(order by job_wantedAuthNo DESC) as jNum, 
			r.* from recruit r) r2 where r2.jNum between #{start} and #{end} </select> -->

		<!-- <select id="all" resultType="jobVO">
			select * from recruit
		</select> -->
</mapper>